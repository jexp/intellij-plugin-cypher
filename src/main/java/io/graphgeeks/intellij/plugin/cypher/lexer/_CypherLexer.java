/* The following code was generated by JFlex 1.4.3 on 12/3/15 5:16 PM */

package io.graphgeeks.intellij.plugin.cypher.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static io.graphgeeks.intellij.plugin.cypher.psi.CypherTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/3/15 5:16 PM from the specification file
 * <tt>/Users/fylmtm/workspace/GraphGeeks/intellij-plugin-cypher/src/main/java/io/graphgeeks/intellij/plugin/cypher/lexer/_CypherLexer.flex</tt>
 */
public class _CypherLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\34\1\1\1\1\22\0\1\1\1\0\1\45"+
    "\1\0\1\35\2\0\1\43\1\50\1\51\1\47\1\63\1\64\1\37"+
    "\1\42\1\46\1\41\11\40\1\57\1\56\1\61\1\60\1\62\1\65"+
    "\1\0\1\4\1\31\1\6\1\14\1\11\1\23\1\27\1\7\1\15"+
    "\1\30\1\33\1\20\1\3\1\13\1\17\1\26\1\24\1\10\1\16"+
    "\1\5\1\12\1\21\1\22\1\25\1\32\1\35\1\54\1\44\1\55"+
    "\1\0\1\35\1\36\1\4\1\31\1\6\1\14\1\11\1\23\1\27"+
    "\1\7\1\15\1\30\1\33\1\20\1\3\1\13\1\17\1\26\1\24"+
    "\1\10\1\16\1\5\1\12\1\21\1\22\1\25\1\32\1\35\1\52"+
    "\1\66\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\16\1\1\3\1\4\1\5\2\6"+
    "\1\7\3\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\3\30\1\31\11\30\1\32\17\30\2\0"+
    "\1\33\1\0\1\34\3\0\1\35\3\0\1\36\2\30"+
    "\1\37\6\30\1\40\13\30\1\41\14\30\1\42\1\43"+
    "\5\0\15\30\1\44\1\45\1\30\1\46\4\30\1\47"+
    "\7\30\1\50\1\51\2\30\1\52\1\53\1\0\1\54"+
    "\1\0\1\55\1\56\10\30\1\57\7\30\1\60\5\30"+
    "\1\61\1\30\1\62\4\30\1\63\1\64\1\30\1\65"+
    "\1\30\1\66\1\30\1\67\1\70\2\30\1\71\7\30"+
    "\1\72\35\30\1\73\1\74\2\30\1\75\3\30\1\76"+
    "\10\30\1\77\7\30\1\100\1\30\1\101\4\30\1\102"+
    "\10\30\1\103\21\30\1\104\4\30\1\105\15\30\1\106"+
    "\1\107\3\30\1\110\2\30\1\111\1\30\1\112\1\30"+
    "\1\113\1\30\1\114\1\30\1\115\1\116\1\30\1\117"+
    "\2\30\1\120\2\30\1\121\2\30\1\122\4\30\1\123"+
    "\1\124\3\30\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\67\0\u0596\0\67\0\67\0\67\0\67"+
    "\0\u05cd\0\67\0\67\0\67\0\67\0\67\0\u0604\0\67"+
    "\0\67\0\67\0\u0113\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u0113"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\67\0\u04f1\0\67\0\u0c76\0\u0528\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\u0d52\0\u0d89\0\67\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u0113\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\67\0\u0c3f"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u0113\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u0113\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u0113\0\u1bee\0\u1c25\0\u0d1b\0\67"+
    "\0\u1c5c\0\67\0\u1c93\0\u0113\0\u0113\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u0113\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u0113\0\u214d\0\u0113\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\67\0\67\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u0113\0\u2373\0\u23aa\0\u23e1\0\u0113\0\u2418\0\u244f"+
    "\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u0113\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\u0113\0\u0113\0\u2bd4\0\u2c0b\0\u0113"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\u0113\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u0113\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u0113\0\u3020\0\u0113\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u0113\0\u3133\0\u316a\0\u31a1\0\u31d8"+
    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u0113\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u0113\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u0113\0\u376e\0\u37a5\0\u37dc\0\u3813"+
    "\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb"+
    "\0\u3a02\0\u0113\0\u0113\0\u3a39\0\u3a70\0\u3aa7\0\u0113\0\u3ade"+
    "\0\u3b15\0\u0113\0\u3b4c\0\u0113\0\u3b83\0\u0113\0\u3bba\0\u0113"+
    "\0\u3bf1\0\u0113\0\u0113\0\u3c28\0\u0113\0\u3c5f\0\u3c96\0\u0113"+
    "\0\u3ccd\0\u3d04\0\u0113\0\u3d3b\0\u3d72\0\u0113\0\u3da9\0\u3de0"+
    "\0\u3e17\0\u3e4e\0\u0113\0\u0113\0\u3e85\0\u3ebc\0\u3ef3\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\6\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\10\6\1\22\1\6\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\70\0"+
    "\2\3\31\0\1\22\35\0\1\53\1\54\4\53\1\55"+
    "\22\53\1\0\1\53\34\0\13\53\1\56\1\53\1\57"+
    "\13\53\1\0\1\53\34\0\31\53\1\0\1\53\34\0"+
    "\5\53\1\60\6\53\1\61\14\53\1\0\1\53\34\0"+
    "\6\53\1\62\22\53\1\0\1\53\34\0\10\53\1\63"+
    "\2\53\1\64\15\53\1\0\1\53\34\0\14\53\1\65"+
    "\14\53\1\0\1\53\34\0\5\53\1\66\1\67\22\53"+
    "\1\0\1\53\34\0\10\53\1\70\2\53\1\71\15\53"+
    "\1\0\1\53\34\0\2\53\1\72\1\53\1\73\1\53"+
    "\1\74\21\53\1\75\1\0\1\53\34\0\5\53\1\76"+
    "\2\53\1\77\12\53\1\100\5\53\1\0\1\53\34\0"+
    "\12\53\1\101\1\53\1\102\14\53\1\0\1\53\34\0"+
    "\4\53\1\103\5\53\1\104\16\53\1\0\1\53\34\0"+
    "\5\53\1\105\4\53\1\106\1\53\1\107\14\53\1\0"+
    "\1\53\32\0\2\22\31\0\1\22\32\0\36\110\1\0"+
    "\30\110\40\0\1\25\1\26\65\0\2\25\1\111\66\0"+
    "\1\111\66\0\1\112\24\0\43\113\1\114\1\115\22\113"+
    "\44\116\1\117\1\114\21\116\46\0\1\120\1\121\70\0"+
    "\1\122\54\0\1\123\67\0\1\25\1\26\16\0\1\124"+
    "\11\0\2\53\1\125\26\53\1\0\1\53\34\0\5\53"+
    "\1\126\23\53\1\0\1\53\34\0\3\53\1\127\7\53"+
    "\1\130\15\53\1\0\1\53\34\0\15\53\1\131\13\53"+
    "\1\0\1\53\34\0\6\53\1\132\22\53\1\0\1\53"+
    "\34\0\10\53\1\133\20\53\1\0\1\53\34\0\1\134"+
    "\1\53\1\135\12\53\1\136\13\53\1\0\1\53\34\0"+
    "\12\53\1\137\4\53\1\140\11\53\1\0\1\53\34\0"+
    "\12\53\1\141\16\53\1\0\1\53\34\0\11\53\1\142"+
    "\17\53\1\0\1\53\34\0\14\53\1\143\14\53\1\0"+
    "\1\53\34\0\2\53\1\144\10\53\1\145\1\53\1\146"+
    "\13\53\1\0\1\53\34\0\7\53\1\147\21\53\1\0"+
    "\1\53\34\0\1\53\1\150\27\53\1\0\1\53\34\0"+
    "\14\53\1\151\14\53\1\0\1\53\34\0\2\53\1\152"+
    "\26\53\1\0\1\53\34\0\12\53\1\153\16\53\1\0"+
    "\1\53\34\0\11\53\1\154\17\53\1\0\1\53\34\0"+
    "\1\155\2\53\1\156\25\53\1\0\1\53\34\0\2\53"+
    "\1\157\26\53\1\0\1\53\34\0\1\160\30\53\1\0"+
    "\1\53\34\0\1\53\1\161\27\53\1\0\1\53\34\0"+
    "\6\53\1\162\22\53\1\0\1\53\34\0\2\53\1\163"+
    "\26\53\1\0\1\53\34\0\14\53\1\164\14\53\1\0"+
    "\1\53\34\0\6\53\1\165\22\53\1\0\1\53\34\0"+
    "\5\53\1\166\23\53\1\0\1\53\31\0\36\110\1\167"+
    "\30\110\40\0\2\170\25\0\2\113\1\0\64\113\2\116"+
    "\1\0\64\116\2\120\1\0\64\120\47\121\1\171\17\121"+
    "\37\0\1\172\21\0\1\173\55\0\1\174\11\0\1\175"+
    "\7\0\3\53\1\176\25\53\1\0\1\53\34\0\24\53"+
    "\1\177\4\53\1\0\1\53\34\0\6\53\1\200\22\53"+
    "\1\0\1\53\34\0\6\53\1\201\22\53\1\0\1\53"+
    "\34\0\13\53\1\202\15\53\1\0\1\53\34\0\1\53"+
    "\1\203\27\53\1\0\1\53\34\0\13\53\1\204\15\53"+
    "\1\0\1\53\34\0\14\53\1\205\14\53\1\0\1\53"+
    "\34\0\7\53\1\206\21\53\1\0\1\53\34\0\1\53"+
    "\1\207\27\53\1\0\1\53\34\0\14\53\1\210\14\53"+
    "\1\0\1\53\34\0\12\53\1\211\16\53\1\0\1\53"+
    "\34\0\10\53\1\212\20\53\1\0\1\53\34\0\6\53"+
    "\1\213\22\53\1\0\1\53\34\0\23\53\1\214\5\53"+
    "\1\0\1\53\34\0\1\53\1\215\27\53\1\0\1\53"+
    "\34\0\3\53\1\216\25\53\1\0\1\53\34\0\6\53"+
    "\1\217\22\53\1\0\1\53\34\0\10\53\1\220\20\53"+
    "\1\0\1\53\34\0\5\53\1\221\23\53\1\0\1\53"+
    "\34\0\5\53\1\222\23\53\1\0\1\53\34\0\23\53"+
    "\1\223\5\53\1\0\1\53\34\0\6\53\1\224\22\53"+
    "\1\0\1\53\34\0\1\53\1\225\27\53\1\0\1\53"+
    "\34\0\5\53\1\226\23\53\1\0\1\53\34\0\12\53"+
    "\1\227\16\53\1\0\1\53\34\0\12\53\1\230\16\53"+
    "\1\0\1\53\34\0\11\53\1\231\17\53\1\0\1\53"+
    "\34\0\5\53\1\232\23\53\1\0\1\53\34\0\4\53"+
    "\1\233\24\53\1\0\1\53\34\0\1\234\30\53\1\0"+
    "\1\53\34\0\15\53\1\235\13\53\1\0\1\53\34\0"+
    "\6\53\1\236\22\53\1\0\1\53\31\0\46\121\1\237"+
    "\1\171\17\121\54\0\1\240\51\0\1\241\100\0\1\242"+
    "\65\0\1\243\21\0\4\53\1\244\24\53\1\0\1\53"+
    "\34\0\6\53\1\245\22\53\1\0\1\53\34\0\10\53"+
    "\1\246\20\53\1\0\1\53\34\0\5\53\1\247\23\53"+
    "\1\0\1\53\34\0\4\53\1\250\24\53\1\0\1\53"+
    "\34\0\2\53\1\251\26\53\1\0\1\53\34\0\2\53"+
    "\1\252\26\53\1\0\1\53\34\0\16\53\1\253\12\53"+
    "\1\0\1\53\34\0\5\53\1\254\23\53\1\0\1\53"+
    "\34\0\2\53\1\255\26\53\1\0\1\53\34\0\10\53"+
    "\1\256\20\53\1\0\1\53\34\0\10\53\1\257\20\53"+
    "\1\0\1\53\34\0\24\53\1\260\4\53\1\0\1\53"+
    "\34\0\12\53\1\261\16\53\1\0\1\53\34\0\3\53"+
    "\1\262\25\53\1\0\1\53\34\0\6\53\1\263\22\53"+
    "\1\0\1\53\34\0\2\53\1\264\26\53\1\0\1\53"+
    "\34\0\12\53\1\265\16\53\1\0\1\53\34\0\2\53"+
    "\1\266\26\53\1\0\1\53\34\0\2\53\1\267\26\53"+
    "\1\0\1\53\34\0\5\53\1\270\23\53\1\0\1\53"+
    "\34\0\2\53\1\271\26\53\1\0\1\53\34\0\6\53"+
    "\1\272\22\53\1\0\1\53\34\0\14\53\1\273\14\53"+
    "\1\0\1\53\34\0\2\53\1\274\26\53\1\0\1\53"+
    "\34\0\3\53\1\275\25\53\1\0\1\53\34\0\6\53"+
    "\1\276\22\53\1\0\1\53\34\0\4\53\1\277\4\53"+
    "\1\300\17\53\1\0\1\53\34\0\11\53\1\301\17\53"+
    "\1\0\1\53\34\0\1\53\1\302\27\53\1\0\1\53"+
    "\105\0\1\303\63\0\1\304\20\0\11\53\1\305\17\53"+
    "\1\0\1\53\34\0\2\53\1\306\26\53\1\0\1\53"+
    "\34\0\14\53\1\307\14\53\1\0\1\53\34\0\6\53"+
    "\1\310\22\53\1\0\1\53\34\0\5\53\1\311\23\53"+
    "\1\0\1\53\34\0\6\53\1\312\22\53\1\0\1\53"+
    "\34\0\10\53\1\313\20\53\1\0\1\53\34\0\12\53"+
    "\1\314\16\53\1\0\1\53\34\0\1\53\1\315\27\53"+
    "\1\0\1\53\34\0\11\53\1\316\17\53\1\0\1\53"+
    "\34\0\12\53\1\317\1\320\7\53\1\321\1\53\1\322"+
    "\3\53\1\0\1\53\34\0\10\53\1\323\20\53\1\0"+
    "\1\53\34\0\4\53\1\324\24\53\1\0\1\53\34\0"+
    "\10\53\1\325\20\53\1\0\1\53\34\0\6\53\1\326"+
    "\22\53\1\0\1\53\34\0\21\53\1\327\7\53\1\0"+
    "\1\53\34\0\6\53\1\330\22\53\1\0\1\53\34\0"+
    "\26\53\1\331\2\53\1\0\1\53\34\0\3\53\1\332"+
    "\25\53\1\0\1\53\34\0\1\53\1\333\27\53\1\0"+
    "\1\53\34\0\10\53\1\334\20\53\1\0\1\53\34\0"+
    "\13\53\1\335\15\53\1\0\1\53\34\0\6\53\1\336"+
    "\22\53\1\0\1\53\34\0\12\53\1\337\16\53\1\0"+
    "\1\53\34\0\2\53\1\340\26\53\1\0\1\53\34\0"+
    "\3\53\1\341\25\53\1\0\1\53\34\0\12\53\1\342"+
    "\16\53\1\0\1\53\34\0\6\53\1\343\22\53\1\0"+
    "\1\53\34\0\5\53\1\344\23\53\1\0\1\53\34\0"+
    "\7\53\1\345\2\53\1\346\16\53\1\0\1\53\34\0"+
    "\1\53\1\347\27\53\1\0\1\53\34\0\11\53\1\350"+
    "\17\53\1\0\1\53\34\0\14\53\1\351\14\53\1\0"+
    "\1\53\34\0\15\53\1\352\13\53\1\0\1\53\34\0"+
    "\10\53\1\353\20\53\1\0\1\53\34\0\3\53\1\354"+
    "\25\53\1\0\1\53\34\0\6\53\1\355\22\53\1\0"+
    "\1\53\34\0\14\53\1\356\14\53\1\0\1\53\34\0"+
    "\11\53\1\357\17\53\1\0\1\53\34\0\11\53\1\360"+
    "\17\53\1\0\1\53\34\0\11\53\1\361\17\53\1\0"+
    "\1\53\34\0\7\53\1\362\21\53\1\0\1\53\34\0"+
    "\13\53\1\363\15\53\1\0\1\53\34\0\27\53\1\364"+
    "\1\53\1\0\1\53\34\0\4\53\1\365\24\53\1\0"+
    "\1\53\34\0\2\53\1\366\26\53\1\0\1\53\34\0"+
    "\1\53\1\367\27\53\1\0\1\53\34\0\16\53\1\370"+
    "\12\53\1\0\1\53\34\0\1\53\1\371\27\53\1\0"+
    "\1\53\34\0\13\53\1\372\15\53\1\0\1\53\34\0"+
    "\6\53\1\373\22\53\1\0\1\53\34\0\4\53\1\374"+
    "\24\53\1\0\1\53\34\0\10\53\1\375\20\53\1\0"+
    "\1\53\34\0\22\53\1\376\6\53\1\0\1\53\34\0"+
    "\2\53\1\377\26\53\1\0\1\53\34\0\10\53\1\u0100"+
    "\20\53\1\0\1\53\34\0\10\53\1\u0101\20\53\1\0"+
    "\1\53\34\0\12\53\1\u0102\16\53\1\0\1\53\34\0"+
    "\12\53\1\u0103\16\53\1\0\1\53\34\0\10\53\1\u0104"+
    "\20\53\1\0\1\53\34\0\15\53\1\u0105\13\53\1\0"+
    "\1\53\34\0\11\53\1\u0106\17\53\1\0\1\53\34\0"+
    "\1\53\1\u0107\27\53\1\0\1\53\34\0\5\53\1\u0108"+
    "\23\53\1\0\1\53\34\0\12\53\1\u0109\16\53\1\0"+
    "\1\53\34\0\6\53\1\u010a\22\53\1\0\1\53\34\0"+
    "\6\53\1\u010b\22\53\1\0\1\53\34\0\12\53\1\u010c"+
    "\16\53\1\0\1\53\34\0\6\53\1\u010d\22\53\1\0"+
    "\1\53\34\0\2\53\1\u010e\26\53\1\0\1\53\34\0"+
    "\6\53\1\u010f\22\53\1\0\1\53\34\0\15\53\1\u0110"+
    "\13\53\1\0\1\53\34\0\11\53\1\u0111\17\53\1\0"+
    "\1\53\34\0\2\53\1\u0112\26\53\1\0\1\53\34\0"+
    "\5\53\1\u0113\23\53\1\0\1\53\34\0\24\53\1\u0114"+
    "\4\53\1\0\1\53\34\0\12\53\1\u0115\16\53\1\0"+
    "\1\53\34\0\6\53\1\u0116\22\53\1\0\1\53\34\0"+
    "\12\53\1\u0117\16\53\1\0\1\53\34\0\11\53\1\u0118"+
    "\17\53\1\0\1\53\34\0\10\53\1\u0119\20\53\1\0"+
    "\1\53\34\0\13\53\1\u011a\15\53\1\0\1\53\34\0"+
    "\13\53\1\u011b\15\53\1\0\1\53\34\0\6\53\1\u011c"+
    "\22\53\1\0\1\53\34\0\10\53\1\u011d\20\53\1\0"+
    "\1\53\34\0\12\53\1\u011e\16\53\1\0\1\53\34\0"+
    "\10\53\1\u011f\20\53\1\0\1\53\34\0\22\53\1\u0120"+
    "\6\53\1\0\1\53\34\0\15\53\1\u0121\13\53\1\0"+
    "\1\53\34\0\10\53\1\u0122\20\53\1\0\1\53\34\0"+
    "\23\53\1\u0123\5\53\1\0\1\53\34\0\1\u0124\30\53"+
    "\1\0\1\53\34\0\6\53\1\u0125\22\53\1\0\1\53"+
    "\34\0\12\53\1\u0126\16\53\1\0\1\53\34\0\1\u0127"+
    "\30\53\1\0\1\53\34\0\13\53\1\u0128\15\53\1\0"+
    "\1\53\34\0\13\53\1\u0129\15\53\1\0\1\53\34\0"+
    "\21\53\1\u012a\7\53\1\0\1\53\34\0\6\53\1\u012b"+
    "\22\53\1\0\1\53\34\0\2\53\1\u012c\26\53\1\0"+
    "\1\53\34\0\2\53\1\u012d\26\53\1\0\1\53\34\0"+
    "\4\53\1\u012e\24\53\1\0\1\53\34\0\22\53\1\u012f"+
    "\6\53\1\0\1\53\34\0\14\53\1\u0130\14\53\1\0"+
    "\1\53\34\0\14\53\1\u0131\14\53\1\0\1\53\34\0"+
    "\14\53\1\u0132\14\53\1\0\1\53\34\0\6\53\1\u0133"+
    "\22\53\1\0\1\53\34\0\24\53\1\u0134\4\53\1\0"+
    "\1\53\34\0\1\53\1\u0135\27\53\1\0\1\53\34\0"+
    "\1\53\1\u0136\27\53\1\0\1\53\34\0\5\53\1\u0137"+
    "\23\53\1\0\1\53\34\0\10\53\1\u0138\20\53\1\0"+
    "\1\53\34\0\12\53\1\u0139\16\53\1\0\1\53\34\0"+
    "\2\53\1\u013a\26\53\1\0\1\53\34\0\2\53\1\u013b"+
    "\26\53\1\0\1\53\34\0\7\53\1\u013c\21\53\1\0"+
    "\1\53\34\0\22\53\1\u013d\6\53\1\0\1\53\34\0"+
    "\14\53\1\u013e\14\53\1\0\1\53\34\0\12\53\1\u013f"+
    "\16\53\1\0\1\53\34\0\12\53\1\u0140\16\53\1\0"+
    "\1\53\34\0\11\53\1\u0141\17\53\1\0\1\53\34\0"+
    "\10\53\1\u0142\20\53\1\0\1\53\34\0\10\53\1\u0143"+
    "\20\53\1\0\1\53\34\0\2\53\1\u0144\26\53\1\0"+
    "\1\53\34\0\2\53\1\u0145\26\53\1\0\1\53\34\0"+
    "\2\53\1\u0146\26\53\1\0\1\53\34\0\13\53\1\u0147"+
    "\15\53\1\0\1\53\34\0\3\53\1\u0148\25\53\1\0"+
    "\1\53\34\0\10\53\1\u0149\20\53\1\0\1\53\34\0"+
    "\13\53\1\u014a\15\53\1\0\1\53\34\0\23\53\1\u014b"+
    "\5\53\1\0\1\53\34\0\6\53\1\u014c\22\53\1\0"+
    "\1\53\34\0\14\53\1\u014d\14\53\1\0\1\53\34\0"+
    "\10\53\1\u014e\20\53\1\0\1\53\34\0\10\53\1\u014f"+
    "\20\53\1\0\1\53\34\0\23\53\1\u0150\5\53\1\0"+
    "\1\53\34\0\12\53\1\u0151\16\53\1\0\1\53\34\0"+
    "\6\53\1\u0152\22\53\1\0\1\53\34\0\4\53\1\u0153"+
    "\24\53\1\0\1\53\34\0\3\53\1\u0154\25\53\1\0"+
    "\1\53\34\0\2\53\1\u0155\26\53\1\0\1\53\34\0"+
    "\1\53\1\u0156\27\53\1\0\1\53\34\0\1\53\1\u0157"+
    "\27\53\1\0\1\53\34\0\10\53\1\u0158\20\53\1\0"+
    "\1\53\34\0\3\53\1\u0159\25\53\1\0\1\53\34\0"+
    "\3\53\1\u015a\25\53\1\0\1\53\34\0\4\53\1\u015b"+
    "\24\53\1\0\1\53\34\0\2\53\1\u015c\26\53\1\0"+
    "\1\53\34\0\2\53\1\u015d\26\53\1\0\1\53\34\0"+
    "\2\53\1\u015e\26\53\1\0\1\53\34\0\3\53\1\u015f"+
    "\25\53\1\0\1\53\34\0\14\53\1\u0160\14\53\1\0"+
    "\1\53\34\0\4\53\1\u0161\24\53\1\0\1\53\34\0"+
    "\14\53\1\u0162\14\53\1\0\1\53\34\0\5\53\1\u0163"+
    "\23\53\1\0\1\53\34\0\13\53\1\u0164\15\53\1\0"+
    "\1\53\34\0\1\u0165\30\53\1\0\1\53\34\0\1\u0166"+
    "\30\53\1\0\1\53\34\0\12\53\1\u0167\16\53\1\0"+
    "\1\53\34\0\2\53\1\u0168\26\53\1\0\1\53\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\1\1\4\11\1\1\5\11"+
    "\1\1\3\11\35\1\2\0\1\11\1\0\1\11\3\0"+
    "\1\1\3\0\1\11\42\1\1\11\1\1\5\0\42\1"+
    "\1\11\1\0\1\11\1\0\37\1\2\11\244\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CypherLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CypherLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 82: 
          { return K_RETURN_DISTINCT;
          }
        case 86: break;
        case 18: 
          { return LESSTHEN;
          }
        case 87: break;
        case 26: 
          { return K_IN;
          }
        case 88: break;
        case 55: 
          { return K_REMOVE;
          }
        case 89: break;
        case 66: 
          { return K_ASCENDING;
          }
        case 90: break;
        case 17: 
          { return EQUAL;
          }
        case 91: break;
        case 6: 
          { return L_INTEGER;
          }
        case 92: break;
        case 29: 
          { return LINECOMMENT;
          }
        case 93: break;
        case 14: 
          { return RIGHTSQUAREBRACE;
          }
        case 94: break;
        case 16: 
          { return COLON;
          }
        case 95: break;
        case 76: 
          { return K_RELATIONSHIP;
          }
        case 96: break;
        case 59: 
          { return K_ORDER_BY;
          }
        case 97: break;
        case 9: 
          { return LEFTBRACE;
          }
        case 98: break;
        case 42: 
          { return BLOCKCOMMENT;
          }
        case 99: break;
        case 32: 
          { return K_REL;
          }
        case 100: break;
        case 83: 
          { return K_FIELDTERMINATOR;
          }
        case 101: break;
        case 78: 
          { return K_SHORTESTPATH;
          }
        case 102: break;
        case 62: 
          { return K_FOREACH;
          }
        case 103: break;
        case 84: 
          { return K_ALLSHORTESTPATHS;
          }
        case 104: break;
        case 35: 
          { return L_DECIMAL;
          }
        case 105: break;
        case 60: 
          { return K_ON_MATCH;
          }
        case 106: break;
        case 79: 
          { return K_WITH_DISTINCT;
          }
        case 107: break;
        case 51: 
          { return STARTRELPATTERNDIRECTED;
          }
        case 108: break;
        case 50: 
          { return K_WHERE;
          }
        case 109: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 110: break;
        case 13: 
          { return LEFTSQUAREBRACE;
          }
        case 111: break;
        case 63: 
          { return K_UNION_ALL;
          }
        case 112: break;
        case 15: 
          { return SEMICOLON;
          }
        case 113: break;
        case 37: 
          { return K_DROP;
          }
        case 114: break;
        case 30: 
          { return PLUSEQUALS;
          }
        case 115: break;
        case 57: 
          { return K_UNWIND;
          }
        case 116: break;
        case 21: 
          { return COMMA;
          }
        case 117: break;
        case 22: 
          { return QUESTIONSIGN;
          }
        case 118: break;
        case 45: 
          { return K_MATCH;
          }
        case 119: break;
        case 85: 
          { return K_USING_PERIODIC_COMMIT;
          }
        case 120: break;
        case 49: 
          { return K_LIMIT;
          }
        case 121: break;
        case 20: 
          { return PLUS;
          }
        case 122: break;
        case 72: 
          { return K_WITH_HEADERS;
          }
        case 123: break;
        case 41: 
          { return K_FROM;
          }
        case 124: break;
        case 12: 
          { return RIGHTCURLYBRACE;
          }
        case 125: break;
        case 61: 
          { return K_LOAD_CSV;
          }
        case 126: break;
        case 52: 
          { return ENDRELPATTERNDIRECTED;
          }
        case 127: break;
        case 25: 
          { return K_AS;
          }
        case 128: break;
        case 36: 
          { return K_NODE;
          }
        case 129: break;
        case 71: 
          { return K_DROP_INDEX_ON;
          }
        case 130: break;
        case 39: 
          { return K_SKIP;
          }
        case 131: break;
        case 43: 
          { return STARTRELPATTERN;
          }
        case 132: break;
        case 7: 
          { return DOT;
          }
        case 133: break;
        case 56: 
          { return K_RETURN;
          }
        case 134: break;
        case 47: 
          { return K_UNION;
          }
        case 135: break;
        case 58: 
          { return K_DELETE;
          }
        case 136: break;
        case 53: 
          { return K_ASSERT;
          }
        case 137: break;
        case 28: 
          { return L_STRING;
          }
        case 138: break;
        case 73: 
          { return K_ASSERT_EXISTS;
          }
        case 139: break;
        case 34: 
          { return L_IDENTIFIER_TEXT;
          }
        case 140: break;
        case 4: 
          { return BACTICK;
          }
        case 141: break;
        case 40: 
          { return K_WITH;
          }
        case 142: break;
        case 80: 
          { return K_CREATE_INDEX_ON;
          }
        case 143: break;
        case 11: 
          { return LEFTCURLYBRACE;
          }
        case 144: break;
        case 44: 
          { return ENDRELPATTERN;
          }
        case 145: break;
        case 31: 
          { return K_ASC;
          }
        case 146: break;
        case 69: 
          { return K_DESCENDING;
          }
        case 147: break;
        case 74: 
          { return K_CREATE_UNIQUE;
          }
        case 148: break;
        case 23: 
          { return PIPE;
          }
        case 149: break;
        case 24: 
          { return L_IDENTIFIER;
          }
        case 150: break;
        case 64: 
          { return K_IS_UNIQUE;
          }
        case 151: break;
        case 48: 
          { return K_START;
          }
        case 152: break;
        case 8: 
          { return MUL;
          }
        case 153: break;
        case 19: 
          { return GREATHERTHEN;
          }
        case 154: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 155: break;
        case 67: 
          { return K_USING_SCAN;
          }
        case 156: break;
        case 10: 
          { return RIGHTBRACE;
          }
        case 157: break;
        case 5: 
          { return MINUS;
          }
        case 158: break;
        case 65: 
          { return K_ON_CREATE;
          }
        case 159: break;
        case 68: 
          { return K_USING_INDEX;
          }
        case 160: break;
        case 27: 
          { return RANGE;
          }
        case 161: break;
        case 33: 
          { return K_SET;
          }
        case 162: break;
        case 77: 
          { return K_DETACH_DELETE;
          }
        case 163: break;
        case 81: 
          { return K_OPTIONAL_MATCH;
          }
        case 164: break;
        case 3: 
          { return L_SPACE;
          }
        case 165: break;
        case 46: 
          { return K_MERGE;
          }
        case 166: break;
        case 54: 
          { return K_CREATE;
          }
        case 167: break;
        case 38: 
          { return K_DESC;
          }
        case 168: break;
        case 75: 
          { return K_CONSTRAINT_ON;
          }
        case 169: break;
        case 70: 
          { return K_USING_JOIN_ON;
          }
        case 170: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

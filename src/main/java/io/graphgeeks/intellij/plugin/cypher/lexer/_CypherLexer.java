/* The following code was generated by JFlex 1.4.3 on 12/4/15 12:23 AM */

package io.graphgeeks.intellij.plugin.cypher.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static io.graphgeeks.intellij.plugin.cypher.psi.CypherTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/4/15 12:23 AM from the specification file
 * <tt>/Users/fylmtm/workspace/GraphGeeks/intellij-plugin-cypher/src/main/java/io/graphgeeks/intellij/plugin/cypher/lexer/_CypherLexer.flex</tt>
 */
public class _CypherLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\34\1\1\1\1\22\0\1\1\1\67\1\45"+
    "\1\0\1\35\1\70\1\0\1\43\1\50\1\51\1\47\1\63\1\64"+
    "\1\37\1\42\1\46\1\41\11\40\1\57\1\56\1\61\1\60\1\62"+
    "\1\65\1\0\1\4\1\31\1\6\1\14\1\11\1\23\1\27\1\7"+
    "\1\15\1\30\1\33\1\20\1\3\1\13\1\17\1\26\1\24\1\10"+
    "\1\16\1\5\1\12\1\21\1\22\1\25\1\32\1\35\1\54\1\44"+
    "\1\55\1\71\1\35\1\36\1\4\1\31\1\6\1\14\1\11\1\23"+
    "\1\27\1\7\1\15\1\30\1\33\1\20\1\3\1\13\1\17\1\26"+
    "\1\24\1\10\1\16\1\5\1\12\1\21\1\22\1\25\1\32\1\35"+
    "\1\52\1\66\1\53\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\21\3\1\4\1\5\1\6\2\7"+
    "\1\10\2\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\1\1\32\1\33\3\3\1\34"+
    "\21\3\1\35\6\3\1\36\13\3\2\0\1\37\1\0"+
    "\1\40\3\0\1\41\3\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\3\1\50\1\51\1\52\1\3\1\53"+
    "\11\3\1\54\1\55\6\3\1\56\13\3\1\57\17\3"+
    "\1\60\1\61\1\62\5\0\5\3\1\63\1\64\1\65"+
    "\11\3\1\66\4\3\1\67\1\70\1\71\1\72\1\3"+
    "\1\73\10\3\1\74\7\3\1\75\1\76\1\3\1\77"+
    "\3\3\1\100\1\101\1\0\1\102\1\0\1\103\1\104"+
    "\4\3\1\105\10\3\1\106\12\3\1\107\6\3\1\110"+
    "\1\3\1\111\2\3\1\112\3\3\1\113\1\114\1\3"+
    "\1\115\1\3\1\116\2\3\1\117\1\120\1\121\4\3"+
    "\1\122\7\3\1\123\2\3\1\124\3\3\1\125\10\3"+
    "\1\126\13\3\1\127\15\3\1\130\1\131\2\3\1\132"+
    "\3\3\1\133\5\3\1\134\3\3\1\135\1\136\7\3"+
    "\1\137\1\140\3\3\1\141\4\3\1\142\10\3\1\143"+
    "\5\3\1\144\15\3\1\145\4\3\1\146\1\147\15\3"+
    "\1\150\1\151\3\3\1\152\2\3\1\153\1\3\1\154"+
    "\1\3\1\155\1\3\1\156\1\3\1\157\1\160\1\3"+
    "\1\161\2\3\1\162\2\3\1\163\2\3\1\164\4\3"+
    "\1\165\1\166\3\3\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[454];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\73\0\u06af\0\73"+
    "\0\73\0\73\0\73\0\u06ea\0\73\0\73\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\73\0\73\0\73\0\u0811\0\73\0\73"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u019d\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\73\0\u05fe\0\73\0\u11bf\0\u0639\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u1321\0\u135c\0\u019d\0\u019d\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u019d\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u019d\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u019d\0\73"+
    "\0\u1184\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u019d\0\u019d\0\u019d\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u019d"+
    "\0\u2292\0\u22cd\0\u2308\0\u2343\0\u019d\0\u019d\0\u019d\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u019d\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\u019d\0\u27a4\0\u27df\0\u019d\0\u281a\0\u2855"+
    "\0\u2890\0\u1270\0\73\0\u28cb\0\73\0\u2906\0\u019d\0\u019d"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u019d\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53"+
    "\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u019d"+
    "\0\u302b\0\u019d\0\u3066\0\u30a1\0\u019d\0\u30dc\0\u3117\0\u3152"+
    "\0\73\0\73\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4"+
    "\0\u019d\0\u32ef\0\u019d\0\u332a\0\u3365\0\u33a0\0\u33db\0\u019d"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u019d"+
    "\0\u35b3\0\u35ee\0\u019d\0\u3629\0\u3664\0\u369f\0\u019d\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u019d"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u019d\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u019d\0\u019d\0\u3e3a\0\u3e75\0\u019d\0\u3eb0\0\u3eeb"+
    "\0\u3f26\0\u019d\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u019d"+
    "\0\u4088\0\u40c3\0\u40fe\0\u019d\0\u019d\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u4260\0\u429b\0\u019d\0\u019d\0\u42d6\0\u4311"+
    "\0\u434c\0\u019d\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u019d\0\u4473"+
    "\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u019d"+
    "\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u019d\0\u4772\0\u47ad"+
    "\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985"+
    "\0\u49c0\0\u49fb\0\u4a36\0\u019d\0\u4a71\0\u4aac\0\u4ae7\0\u4b22"+
    "\0\u019d\0\u019d\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u019d"+
    "\0\u019d\0\u4e5c\0\u4e97\0\u4ed2\0\u019d\0\u4f0d\0\u4f48\0\u019d"+
    "\0\u4f83\0\u019d\0\u4fbe\0\u019d\0\u4ff9\0\u019d\0\u5034\0\u019d"+
    "\0\u019d\0\u506f\0\u019d\0\u50aa\0\u50e5\0\u019d\0\u5120\0\u515b"+
    "\0\u019d\0\u5196\0\u51d1\0\u019d\0\u520c\0\u5247\0\u5282\0\u52bd"+
    "\0\u019d\0\u019d\0\u52f8\0\u5333\0\u536e\0\u019d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[454];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\10\1\22\1\23\1\10\1\24\6\10\1\25\1\10"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\2\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\2\74\0\2\3\31\0"+
    "\1\25\41\0\1\10\1\61\4\10\1\62\22\10\1\0"+
    "\1\10\40\0\10\10\1\63\2\10\1\64\1\10\1\65"+
    "\13\10\1\0\1\10\40\0\4\10\1\66\1\67\23\10"+
    "\1\0\1\10\40\0\1\10\1\70\3\10\1\71\6\10"+
    "\1\72\14\10\1\0\1\10\40\0\31\10\1\0\1\10"+
    "\40\0\6\10\1\73\22\10\1\0\1\10\40\0\10\10"+
    "\1\74\4\10\1\75\4\10\1\76\6\10\1\0\1\10"+
    "\40\0\10\10\1\77\2\10\1\100\15\10\1\0\1\10"+
    "\40\0\7\10\1\101\4\10\1\102\14\10\1\0\1\10"+
    "\40\0\5\10\1\103\1\104\3\10\1\105\16\10\1\0"+
    "\1\10\40\0\10\10\1\106\2\10\1\107\15\10\1\0"+
    "\1\10\40\0\2\10\1\110\1\10\1\111\1\10\1\112"+
    "\3\10\1\113\15\10\1\114\1\0\1\10\40\0\5\10"+
    "\1\115\2\10\1\116\12\10\1\117\5\10\1\0\1\10"+
    "\40\0\12\10\1\120\1\10\1\121\14\10\1\0\1\10"+
    "\40\0\4\10\1\122\5\10\1\123\16\10\1\0\1\10"+
    "\40\0\1\10\1\124\3\10\1\125\4\10\1\126\1\10"+
    "\1\127\14\10\1\0\1\10\40\0\14\10\1\130\14\10"+
    "\1\0\1\10\36\0\2\25\31\0\1\25\36\0\36\131"+
    "\1\0\34\131\40\0\1\30\1\31\71\0\2\30\1\132"+
    "\72\0\1\132\72\0\1\133\30\0\43\134\1\135\1\136"+
    "\26\134\44\137\1\140\1\135\25\137\46\0\1\141\1\142"+
    "\74\0\1\143\60\0\1\144\125\0\1\145\60\0\1\146"+
    "\1\0\1\147\70\0\1\150\52\0\1\30\1\31\16\0"+
    "\1\151\72\0\1\152\15\0\2\10\1\153\26\10\1\0"+
    "\1\10\40\0\5\10\1\154\23\10\1\0\1\10\40\0"+
    "\11\10\1\155\15\10\1\156\1\10\1\0\1\10\40\0"+
    "\3\10\1\157\7\10\1\160\15\10\1\0\1\10\40\0"+
    "\15\10\1\161\13\10\1\0\1\10\40\0\6\10\1\162"+
    "\22\10\1\0\1\10\40\0\7\10\1\163\21\10\1\0"+
    "\1\10\40\0\13\10\1\164\15\10\1\0\1\10\40\0"+
    "\6\10\1\165\22\10\1\0\1\10\40\0\7\10\1\166"+
    "\1\167\20\10\1\0\1\10\40\0\1\170\1\10\1\171"+
    "\6\10\1\172\3\10\1\173\13\10\1\0\1\10\40\0"+
    "\11\10\1\174\17\10\1\0\1\10\40\0\13\10\1\175"+
    "\15\10\1\0\1\10\40\0\2\10\1\176\26\10\1\0"+
    "\1\10\40\0\12\10\1\177\4\10\1\200\11\10\1\0"+
    "\1\10\40\0\12\10\1\201\16\10\1\0\1\10\40\0"+
    "\15\10\1\202\13\10\1\0\1\10\40\0\2\10\1\203"+
    "\5\10\1\204\1\205\17\10\1\0\1\10\40\0\14\10"+
    "\1\206\14\10\1\0\1\10\40\0\2\10\1\207\10\10"+
    "\1\210\1\10\1\211\13\10\1\0\1\10\40\0\13\10"+
    "\1\212\15\10\1\0\1\10\40\0\7\10\1\213\1\214"+
    "\20\10\1\0\1\10\40\0\1\10\1\215\27\10\1\0"+
    "\1\10\40\0\14\10\1\216\14\10\1\0\1\10\40\0"+
    "\2\10\1\217\26\10\1\0\1\10\40\0\10\10\1\220"+
    "\20\10\1\0\1\10\40\0\12\10\1\221\16\10\1\0"+
    "\1\10\40\0\11\10\1\222\17\10\1\0\1\10\40\0"+
    "\1\223\2\10\1\224\25\10\1\0\1\10\40\0\2\10"+
    "\1\225\26\10\1\0\1\10\40\0\1\226\30\10\1\0"+
    "\1\10\40\0\1\10\1\227\27\10\1\0\1\10\40\0"+
    "\6\10\1\230\22\10\1\0\1\10\40\0\2\10\1\231"+
    "\26\10\1\0\1\10\40\0\15\10\1\232\13\10\1\0"+
    "\1\10\40\0\14\10\1\233\14\10\1\0\1\10\40\0"+
    "\6\10\1\234\6\10\1\235\13\10\1\0\1\10\40\0"+
    "\5\10\1\236\23\10\1\0\1\10\40\0\5\10\1\237"+
    "\23\10\1\0\1\10\35\0\36\131\1\240\34\131\40\0"+
    "\2\241\31\0\2\134\1\0\70\134\2\137\1\0\70\137"+
    "\2\141\1\0\70\141\47\142\1\242\23\142\37\0\1\243"+
    "\21\0\1\244\61\0\1\245\11\0\1\246\13\0\3\10"+
    "\1\247\25\10\1\0\1\10\40\0\24\10\1\250\4\10"+
    "\1\0\1\10\40\0\6\10\1\251\22\10\1\0\1\10"+
    "\40\0\6\10\1\252\22\10\1\0\1\10\40\0\13\10"+
    "\1\253\15\10\1\0\1\10\40\0\10\10\1\254\20\10"+
    "\1\0\1\10\40\0\6\10\1\255\22\10\1\0\1\10"+
    "\40\0\6\10\1\256\22\10\1\0\1\10\40\0\1\10"+
    "\1\257\27\10\1\0\1\10\40\0\10\10\1\260\20\10"+
    "\1\0\1\10\40\0\2\10\1\261\10\10\1\262\15\10"+
    "\1\0\1\10\40\0\14\10\1\263\14\10\1\0\1\10"+
    "\40\0\7\10\1\264\21\10\1\0\1\10\40\0\7\10"+
    "\1\265\21\10\1\0\1\10\40\0\1\10\1\266\27\10"+
    "\1\0\1\10\40\0\13\10\1\267\15\10\1\0\1\10"+
    "\40\0\6\10\1\270\22\10\1\0\1\10\40\0\5\10"+
    "\1\271\23\10\1\0\1\10\40\0\14\10\1\272\14\10"+
    "\1\0\1\10\40\0\12\10\1\273\16\10\1\0\1\10"+
    "\40\0\10\10\1\274\20\10\1\0\1\10\40\0\15\10"+
    "\1\275\13\10\1\0\1\10\40\0\6\10\1\276\22\10"+
    "\1\0\1\10\40\0\6\10\1\277\22\10\1\0\1\10"+
    "\40\0\23\10\1\300\5\10\1\0\1\10\40\0\1\10"+
    "\1\301\27\10\1\0\1\10\40\0\3\10\1\302\25\10"+
    "\1\0\1\10\40\0\6\10\1\303\22\10\1\0\1\10"+
    "\40\0\2\10\1\304\26\10\1\0\1\10\40\0\10\10"+
    "\1\305\20\10\1\0\1\10\40\0\7\10\1\306\4\10"+
    "\1\307\14\10\1\0\1\10\40\0\5\10\1\310\23\10"+
    "\1\0\1\10\40\0\5\10\1\311\23\10\1\0\1\10"+
    "\40\0\24\10\1\312\4\10\1\0\1\10\40\0\23\10"+
    "\1\313\5\10\1\0\1\10\40\0\6\10\1\314\22\10"+
    "\1\0\1\10\40\0\1\10\1\315\27\10\1\0\1\10"+
    "\40\0\5\10\1\316\23\10\1\0\1\10\40\0\12\10"+
    "\1\317\16\10\1\0\1\10\40\0\12\10\1\320\16\10"+
    "\1\0\1\10\40\0\11\10\1\321\17\10\1\0\1\10"+
    "\40\0\5\10\1\322\2\10\1\323\20\10\1\0\1\10"+
    "\40\0\4\10\1\324\24\10\1\0\1\10\40\0\13\10"+
    "\1\325\15\10\1\0\1\10\40\0\1\326\30\10\1\0"+
    "\1\10\40\0\15\10\1\327\13\10\1\0\1\10\40\0"+
    "\2\10\1\330\26\10\1\0\1\10\40\0\6\10\1\331"+
    "\22\10\1\0\1\10\35\0\46\142\1\332\1\242\23\142"+
    "\54\0\1\333\55\0\1\334\104\0\1\335\71\0\1\336"+
    "\25\0\4\10\1\337\24\10\1\0\1\10\40\0\6\10"+
    "\1\340\22\10\1\0\1\10\40\0\10\10\1\341\20\10"+
    "\1\0\1\10\40\0\5\10\1\342\23\10\1\0\1\10"+
    "\40\0\4\10\1\343\24\10\1\0\1\10\40\0\2\10"+
    "\1\344\26\10\1\0\1\10\40\0\2\10\1\345\26\10"+
    "\1\0\1\10\40\0\1\10\1\346\27\10\1\0\1\10"+
    "\40\0\2\10\1\347\26\10\1\0\1\10\40\0\16\10"+
    "\1\350\12\10\1\0\1\10\40\0\5\10\1\351\23\10"+
    "\1\0\1\10\40\0\3\10\1\352\25\10\1\0\1\10"+
    "\40\0\2\10\1\353\26\10\1\0\1\10\40\0\17\10"+
    "\1\354\11\10\1\0\1\10\40\0\1\10\1\355\27\10"+
    "\1\0\1\10\40\0\10\10\1\356\20\10\1\0\1\10"+
    "\40\0\10\10\1\357\20\10\1\0\1\10\40\0\24\10"+
    "\1\360\4\10\1\0\1\10\40\0\12\10\1\361\16\10"+
    "\1\0\1\10\40\0\3\10\1\362\25\10\1\0\1\10"+
    "\40\0\6\10\1\363\22\10\1\0\1\10\40\0\2\10"+
    "\1\364\26\10\1\0\1\10\40\0\12\10\1\365\16\10"+
    "\1\0\1\10\40\0\12\10\1\366\16\10\1\0\1\10"+
    "\40\0\15\10\1\367\13\10\1\0\1\10\40\0\2\10"+
    "\1\370\26\10\1\0\1\10\40\0\2\10\1\371\26\10"+
    "\1\0\1\10\40\0\2\10\1\372\26\10\1\0\1\10"+
    "\40\0\15\10\1\373\13\10\1\0\1\10\40\0\5\10"+
    "\1\374\23\10\1\0\1\10\40\0\2\10\1\375\26\10"+
    "\1\0\1\10\40\0\6\10\1\376\22\10\1\0\1\10"+
    "\40\0\14\10\1\377\14\10\1\0\1\10\40\0\2\10"+
    "\1\u0100\26\10\1\0\1\10\40\0\3\10\1\u0101\25\10"+
    "\1\0\1\10\40\0\6\10\1\u0102\22\10\1\0\1\10"+
    "\40\0\4\10\1\u0103\4\10\1\u0104\17\10\1\0\1\10"+
    "\40\0\6\10\1\u0105\22\10\1\0\1\10\40\0\11\10"+
    "\1\u0106\17\10\1\0\1\10\40\0\6\10\1\u0107\22\10"+
    "\1\0\1\10\40\0\1\10\1\u0108\27\10\1\0\1\10"+
    "\111\0\1\u0109\67\0\1\u010a\24\0\11\10\1\u010b\17\10"+
    "\1\0\1\10\40\0\2\10\1\u010c\26\10\1\0\1\10"+
    "\40\0\14\10\1\u010d\14\10\1\0\1\10\40\0\6\10"+
    "\1\u010e\22\10\1\0\1\10\40\0\12\10\1\u010f\16\10"+
    "\1\0\1\10\40\0\5\10\1\u0110\23\10\1\0\1\10"+
    "\40\0\6\10\1\u0111\22\10\1\0\1\10\40\0\10\10"+
    "\1\u0112\20\10\1\0\1\10\40\0\6\10\1\u0113\22\10"+
    "\1\0\1\10\40\0\12\10\1\u0114\16\10\1\0\1\10"+
    "\40\0\12\10\1\u0115\16\10\1\0\1\10\40\0\3\10"+
    "\1\u0116\25\10\1\0\1\10\40\0\1\10\1\u0117\27\10"+
    "\1\0\1\10\40\0\11\10\1\u0118\17\10\1\0\1\10"+
    "\40\0\12\10\1\u0119\1\u011a\7\10\1\u011b\1\10\1\u011c"+
    "\3\10\1\0\1\10\40\0\10\10\1\u011d\20\10\1\0"+
    "\1\10\40\0\4\10\1\u011e\24\10\1\0\1\10\40\0"+
    "\10\10\1\u011f\20\10\1\0\1\10\40\0\6\10\1\u0120"+
    "\22\10\1\0\1\10\40\0\10\10\1\u0121\20\10\1\0"+
    "\1\10\40\0\21\10\1\u0122\7\10\1\0\1\10\40\0"+
    "\15\10\1\u0123\13\10\1\0\1\10\40\0\10\10\1\u0124"+
    "\20\10\1\0\1\10\40\0\13\10\1\u0125\15\10\1\0"+
    "\1\10\40\0\6\10\1\u0126\22\10\1\0\1\10\40\0"+
    "\6\10\1\u0127\22\10\1\0\1\10\40\0\26\10\1\u0128"+
    "\2\10\1\0\1\10\40\0\3\10\1\u0129\25\10\1\0"+
    "\1\10\40\0\1\10\1\u012a\27\10\1\0\1\10\40\0"+
    "\10\10\1\u012b\20\10\1\0\1\10\40\0\13\10\1\u012c"+
    "\15\10\1\0\1\10\40\0\6\10\1\u012d\22\10\1\0"+
    "\1\10\40\0\12\10\1\u012e\16\10\1\0\1\10\40\0"+
    "\2\10\1\u012f\26\10\1\0\1\10\40\0\5\10\1\u0130"+
    "\23\10\1\0\1\10\40\0\3\10\1\u0131\25\10\1\0"+
    "\1\10\40\0\12\10\1\u0132\16\10\1\0\1\10\40\0"+
    "\6\10\1\u0133\22\10\1\0\1\10\40\0\5\10\1\u0134"+
    "\23\10\1\0\1\10\40\0\7\10\1\u0135\2\10\1\u0136"+
    "\16\10\1\0\1\10\40\0\10\10\1\u0137\20\10\1\0"+
    "\1\10\40\0\1\10\1\u0138\27\10\1\0\1\10\40\0"+
    "\11\10\1\u0139\17\10\1\0\1\10\40\0\14\10\1\u013a"+
    "\14\10\1\0\1\10\40\0\2\10\1\u013b\26\10\1\0"+
    "\1\10\40\0\2\10\1\u013c\26\10\1\0\1\10\40\0"+
    "\15\10\1\u013d\13\10\1\0\1\10\40\0\10\10\1\u013e"+
    "\20\10\1\0\1\10\40\0\3\10\1\u013f\25\10\1\0"+
    "\1\10\40\0\6\10\1\u0140\22\10\1\0\1\10\40\0"+
    "\14\10\1\u0141\14\10\1\0\1\10\40\0\11\10\1\u0142"+
    "\17\10\1\0\1\10\40\0\11\10\1\u0143\17\10\1\0"+
    "\1\10\40\0\11\10\1\u0144\17\10\1\0\1\10\40\0"+
    "\3\10\1\u0145\25\10\1\0\1\10\40\0\7\10\1\u0146"+
    "\21\10\1\0\1\10\40\0\7\10\1\u0147\21\10\1\0"+
    "\1\10\40\0\17\10\1\u0148\11\10\1\0\1\10\40\0"+
    "\13\10\1\u0149\15\10\1\0\1\10\40\0\27\10\1\u014a"+
    "\1\10\1\0\1\10\40\0\4\10\1\u014b\24\10\1\0"+
    "\1\10\40\0\2\10\1\u014c\26\10\1\0\1\10\40\0"+
    "\1\10\1\u014d\27\10\1\0\1\10\40\0\16\10\1\u014e"+
    "\12\10\1\0\1\10\40\0\1\10\1\u014f\27\10\1\0"+
    "\1\10\40\0\13\10\1\u0150\15\10\1\0\1\10\40\0"+
    "\6\10\1\u0151\22\10\1\0\1\10\40\0\4\10\1\u0152"+
    "\24\10\1\0\1\10\40\0\10\10\1\u0153\20\10\1\0"+
    "\1\10\40\0\22\10\1\u0154\6\10\1\0\1\10\40\0"+
    "\2\10\1\u0155\26\10\1\0\1\10\40\0\10\10\1\u0156"+
    "\20\10\1\0\1\10\40\0\10\10\1\u0157\20\10\1\0"+
    "\1\10\40\0\13\10\1\u0158\15\10\1\0\1\10\40\0"+
    "\12\10\1\u0159\16\10\1\0\1\10\40\0\12\10\1\u015a"+
    "\16\10\1\0\1\10\40\0\10\10\1\u015b\20\10\1\0"+
    "\1\10\40\0\4\10\1\u015c\24\10\1\0\1\10\40\0"+
    "\15\10\1\u015d\13\10\1\0\1\10\40\0\11\10\1\u015e"+
    "\17\10\1\0\1\10\40\0\1\10\1\u015f\27\10\1\0"+
    "\1\10\40\0\5\10\1\u0160\23\10\1\0\1\10\40\0"+
    "\12\10\1\u0161\16\10\1\0\1\10\40\0\6\10\1\u0162"+
    "\22\10\1\0\1\10\40\0\6\10\1\u0163\22\10\1\0"+
    "\1\10\40\0\12\10\1\u0164\16\10\1\0\1\10\40\0"+
    "\2\10\1\u0165\26\10\1\0\1\10\40\0\6\10\1\u0166"+
    "\22\10\1\0\1\10\40\0\15\10\1\u0167\13\10\1\0"+
    "\1\10\40\0\12\10\1\u0168\16\10\1\0\1\10\40\0"+
    "\2\10\1\u0169\26\10\1\0\1\10\40\0\6\10\1\u016a"+
    "\22\10\1\0\1\10\40\0\15\10\1\u016b\13\10\1\0"+
    "\1\10\40\0\11\10\1\u016c\17\10\1\0\1\10\40\0"+
    "\2\10\1\u016d\26\10\1\0\1\10\40\0\5\10\1\u016e"+
    "\23\10\1\0\1\10\40\0\24\10\1\u016f\4\10\1\0"+
    "\1\10\40\0\12\10\1\u0170\16\10\1\0\1\10\40\0"+
    "\6\10\1\u0171\22\10\1\0\1\10\40\0\12\10\1\u0172"+
    "\16\10\1\0\1\10\40\0\11\10\1\u0173\17\10\1\0"+
    "\1\10\40\0\10\10\1\u0174\20\10\1\0\1\10\40\0"+
    "\13\10\1\u0175\15\10\1\0\1\10\40\0\13\10\1\u0176"+
    "\15\10\1\0\1\10\40\0\6\10\1\u0177\22\10\1\0"+
    "\1\10\40\0\10\10\1\u0178\20\10\1\0\1\10\40\0"+
    "\12\10\1\u0179\16\10\1\0\1\10\40\0\10\10\1\u017a"+
    "\20\10\1\0\1\10\40\0\22\10\1\u017b\6\10\1\0"+
    "\1\10\40\0\15\10\1\u017c\13\10\1\0\1\10\40\0"+
    "\10\10\1\u017d\20\10\1\0\1\10\40\0\15\10\1\u017e"+
    "\13\10\1\0\1\10\40\0\2\10\1\u017f\26\10\1\0"+
    "\1\10\40\0\23\10\1\u0180\5\10\1\0\1\10\40\0"+
    "\1\u0181\30\10\1\0\1\10\40\0\6\10\1\u0182\22\10"+
    "\1\0\1\10\40\0\12\10\1\u0183\16\10\1\0\1\10"+
    "\40\0\1\u0184\30\10\1\0\1\10\40\0\13\10\1\u0185"+
    "\15\10\1\0\1\10\40\0\13\10\1\u0186\15\10\1\0"+
    "\1\10\40\0\21\10\1\u0187\7\10\1\0\1\10\40\0"+
    "\6\10\1\u0188\22\10\1\0\1\10\40\0\2\10\1\u0189"+
    "\26\10\1\0\1\10\40\0\2\10\1\u018a\26\10\1\0"+
    "\1\10\40\0\4\10\1\u018b\24\10\1\0\1\10\40\0"+
    "\22\10\1\u018c\6\10\1\0\1\10\40\0\14\10\1\u018d"+
    "\14\10\1\0\1\10\40\0\14\10\1\u018e\14\10\1\0"+
    "\1\10\40\0\14\10\1\u018f\14\10\1\0\1\10\40\0"+
    "\6\10\1\u0190\22\10\1\0\1\10\40\0\24\10\1\u0191"+
    "\4\10\1\0\1\10\40\0\4\10\1\u0192\24\10\1\0"+
    "\1\10\40\0\1\10\1\u0193\27\10\1\0\1\10\40\0"+
    "\1\10\1\u0194\27\10\1\0\1\10\40\0\5\10\1\u0195"+
    "\23\10\1\0\1\10\40\0\10\10\1\u0196\20\10\1\0"+
    "\1\10\40\0\12\10\1\u0197\16\10\1\0\1\10\40\0"+
    "\2\10\1\u0198\26\10\1\0\1\10\40\0\2\10\1\u0199"+
    "\26\10\1\0\1\10\40\0\7\10\1\u019a\21\10\1\0"+
    "\1\10\40\0\22\10\1\u019b\6\10\1\0\1\10\40\0"+
    "\14\10\1\u019c\14\10\1\0\1\10\40\0\12\10\1\u019d"+
    "\16\10\1\0\1\10\40\0\12\10\1\u019e\16\10\1\0"+
    "\1\10\40\0\11\10\1\u019f\17\10\1\0\1\10\40\0"+
    "\10\10\1\u01a0\20\10\1\0\1\10\40\0\10\10\1\u01a1"+
    "\20\10\1\0\1\10\40\0\2\10\1\u01a2\26\10\1\0"+
    "\1\10\40\0\2\10\1\u01a3\26\10\1\0\1\10\40\0"+
    "\2\10\1\u01a4\26\10\1\0\1\10\40\0\13\10\1\u01a5"+
    "\15\10\1\0\1\10\40\0\3\10\1\u01a6\25\10\1\0"+
    "\1\10\40\0\10\10\1\u01a7\20\10\1\0\1\10\40\0"+
    "\13\10\1\u01a8\15\10\1\0\1\10\40\0\23\10\1\u01a9"+
    "\5\10\1\0\1\10\40\0\6\10\1\u01aa\22\10\1\0"+
    "\1\10\40\0\14\10\1\u01ab\14\10\1\0\1\10\40\0"+
    "\10\10\1\u01ac\20\10\1\0\1\10\40\0\10\10\1\u01ad"+
    "\20\10\1\0\1\10\40\0\23\10\1\u01ae\5\10\1\0"+
    "\1\10\40\0\12\10\1\u01af\16\10\1\0\1\10\40\0"+
    "\6\10\1\u01b0\22\10\1\0\1\10\40\0\4\10\1\u01b1"+
    "\24\10\1\0\1\10\40\0\3\10\1\u01b2\25\10\1\0"+
    "\1\10\40\0\2\10\1\u01b3\26\10\1\0\1\10\40\0"+
    "\1\10\1\u01b4\27\10\1\0\1\10\40\0\1\10\1\u01b5"+
    "\27\10\1\0\1\10\40\0\10\10\1\u01b6\20\10\1\0"+
    "\1\10\40\0\3\10\1\u01b7\25\10\1\0\1\10\40\0"+
    "\3\10\1\u01b8\25\10\1\0\1\10\40\0\4\10\1\u01b9"+
    "\24\10\1\0\1\10\40\0\2\10\1\u01ba\26\10\1\0"+
    "\1\10\40\0\2\10\1\u01bb\26\10\1\0\1\10\40\0"+
    "\2\10\1\u01bc\26\10\1\0\1\10\40\0\3\10\1\u01bd"+
    "\25\10\1\0\1\10\40\0\14\10\1\u01be\14\10\1\0"+
    "\1\10\40\0\4\10\1\u01bf\24\10\1\0\1\10\40\0"+
    "\14\10\1\u01c0\14\10\1\0\1\10\40\0\5\10\1\u01c1"+
    "\23\10\1\0\1\10\40\0\13\10\1\u01c2\15\10\1\0"+
    "\1\10\40\0\1\u01c3\30\10\1\0\1\10\40\0\1\u01c4"+
    "\30\10\1\0\1\10\40\0\12\10\1\u01c5\16\10\1\0"+
    "\1\10\40\0\2\10\1\u01c6\26\10\1\0\1\10\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21417];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\1\11\1\1\4\11\1\1\2\11"+
    "\4\1\3\11\1\1\2\11\50\1\2\0\1\11\1\0"+
    "\1\11\3\0\1\1\3\0\6\11\65\1\1\11\1\1"+
    "\5\0\64\1\1\11\1\0\1\11\1\0\52\1\2\11"+
    "\274\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[454];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CypherLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CypherLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 116: 
          { return K_RETURN_DISTINCT;
          }
        case 120: break;
        case 87: 
          { return K_EXTRACT;
          }
        case 121: break;
        case 20: 
          { return LESSTHEN;
          }
        case 122: break;
        case 48: 
          { return K_XOR;
          }
        case 123: break;
        case 29: 
          { return K_IN;
          }
        case 124: break;
        case 79: 
          { return K_REMOVE;
          }
        case 125: break;
        case 98: 
          { return K_ASCENDING;
          }
        case 126: break;
        case 74: 
          { return K_FALSE;
          }
        case 127: break;
        case 19: 
          { return EQUAL;
          }
        case 128: break;
        case 7: 
          { return L_INTEGER;
          }
        case 129: break;
        case 33: 
          { return LINECOMMENT;
          }
        case 130: break;
        case 61: 
          { return K_WHEN;
          }
        case 131: break;
        case 16: 
          { return RIGHTSQUAREBRACE;
          }
        case 132: break;
        case 18: 
          { return COLON;
          }
        case 133: break;
        case 110: 
          { return K_RELATIONSHIP;
          }
        case 134: break;
        case 88: 
          { return K_ORDER_BY;
          }
        case 135: break;
        case 11: 
          { return LEFTBRACE;
          }
        case 136: break;
        case 64: 
          { return BLOCKCOMMENT;
          }
        case 137: break;
        case 44: 
          { return K_REL;
          }
        case 138: break;
        case 117: 
          { return K_FIELDTERMINATOR;
          }
        case 139: break;
        case 56: 
          { return K_NONE;
          }
        case 140: break;
        case 112: 
          { return K_SHORTESTPATH;
          }
        case 141: break;
        case 91: 
          { return K_FOREACH;
          }
        case 142: break;
        case 30: 
          { return K_OR;
          }
        case 143: break;
        case 118: 
          { return K_ALLSHORTESTPATHS;
          }
        case 144: break;
        case 50: 
          { return L_DECIMAL;
          }
        case 145: break;
        case 89: 
          { return K_ON_MATCH;
          }
        case 146: break;
        case 113: 
          { return K_WITH_DISTINCT;
          }
        case 147: break;
        case 75: 
          { return STARTRELPATTERNDIRECTED;
          }
        case 148: break;
        case 73: 
          { return K_WHERE;
          }
        case 149: break;
        case 55: 
          { return K_NULL;
          }
        case 150: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 151: break;
        case 15: 
          { return LEFTSQUAREBRACE;
          }
        case 152: break;
        case 39: 
          { return NOTEQUALS;
          }
        case 153: break;
        case 94: 
          { return K_UNION_ALL;
          }
        case 154: break;
        case 17: 
          { return SEMICOLON;
          }
        case 155: break;
        case 82: 
          { return K_UNWIND;
          }
        case 156: break;
        case 58: 
          { return K_DROP;
          }
        case 157: break;
        case 38: 
          { return PLUSEQUALS;
          }
        case 158: break;
        case 23: 
          { return COMMA;
          }
        case 159: break;
        case 41: 
          { return K_ANY;
          }
        case 160: break;
        case 24: 
          { return QUESTIONSIGN;
          }
        case 161: break;
        case 27: 
          { return POW;
          }
        case 162: break;
        case 37: 
          { return GREATERTHANEQUALS;
          }
        case 163: break;
        case 67: 
          { return K_MATCH;
          }
        case 164: break;
        case 95: 
          { return K_DISTINCT;
          }
        case 165: break;
        case 119: 
          { return K_USING_PERIODIC_COMMIT;
          }
        case 166: break;
        case 72: 
          { return K_LIMIT;
          }
        case 167: break;
        case 22: 
          { return PLUS;
          }
        case 168: break;
        case 35: 
          { return LESSTHANEQUALS;
          }
        case 169: break;
        case 106: 
          { return K_WITH_HEADERS;
          }
        case 170: break;
        case 63: 
          { return K_FROM;
          }
        case 171: break;
        case 46: 
          { return K_NOT;
          }
        case 172: break;
        case 90: 
          { return K_LOAD_CSV;
          }
        case 173: break;
        case 85: 
          { return K_SINGLE;
          }
        case 174: break;
        case 14: 
          { return RIGHTCURLYBRACE;
          }
        case 175: break;
        case 93: 
          { return K_ENDS_WITH;
          }
        case 176: break;
        case 76: 
          { return ENDRELPATTERNDIRECTED;
          }
        case 177: break;
        case 28: 
          { return K_AS;
          }
        case 178: break;
        case 105: 
          { return K_DROP_INDEX_ON;
          }
        case 179: break;
        case 57: 
          { return K_NODE;
          }
        case 180: break;
        case 81: 
          { return K_REDUCE;
          }
        case 181: break;
        case 43: 
          { return K_ALL;
          }
        case 182: break;
        case 60: 
          { return K_SKIP;
          }
        case 183: break;
        case 65: 
          { return STARTRELPATTERN;
          }
        case 184: break;
        case 8: 
          { return DOT;
          }
        case 185: break;
        case 34: 
          { return REGEXMATCH;
          }
        case 186: break;
        case 80: 
          { return K_RETURN;
          }
        case 187: break;
        case 70: 
          { return K_UNION;
          }
        case 188: break;
        case 103: 
          { return K_STARTS_WITH;
          }
        case 189: break;
        case 83: 
          { return K_DELETE;
          }
        case 190: break;
        case 86: 
          { return K_FILTER;
          }
        case 191: break;
        case 77: 
          { return K_ASSERT;
          }
        case 192: break;
        case 32: 
          { return L_STRING;
          }
        case 193: break;
        case 107: 
          { return K_ASSERT_EXISTS;
          }
        case 194: break;
        case 9: 
          { return DIVIDE;
          }
        case 195: break;
        case 49: 
          { return L_IDENTIFIER_TEXT;
          }
        case 196: break;
        case 54: 
          { return K_ELSE;
          }
        case 197: break;
        case 5: 
          { return BACTICK;
          }
        case 198: break;
        case 62: 
          { return K_WITH;
          }
        case 199: break;
        case 51: 
          { return K_THEN;
          }
        case 200: break;
        case 114: 
          { return K_CREATE_INDEX_ON;
          }
        case 201: break;
        case 13: 
          { return LEFTCURLYBRACE;
          }
        case 202: break;
        case 84: 
          { return K_IS_NULL;
          }
        case 203: break;
        case 53: 
          { return K_CASE;
          }
        case 204: break;
        case 66: 
          { return ENDRELPATTERN;
          }
        case 205: break;
        case 40: 
          { return K_AND;
          }
        case 206: break;
        case 42: 
          { return K_ASC;
          }
        case 207: break;
        case 102: 
          { return K_DESCENDING;
          }
        case 208: break;
        case 108: 
          { return K_CREATE_UNIQUE;
          }
        case 209: break;
        case 25: 
          { return PIPE;
          }
        case 210: break;
        case 26: 
          { return MODULO;
          }
        case 211: break;
        case 3: 
          { return L_IDENTIFIER;
          }
        case 212: break;
        case 36: 
          { return INVALIDNOTEQUALS;
          }
        case 213: break;
        case 96: 
          { return K_IS_UNIQUE;
          }
        case 214: break;
        case 71: 
          { return K_START;
          }
        case 215: break;
        case 45: 
          { return K_END;
          }
        case 216: break;
        case 10: 
          { return MUL;
          }
        case 217: break;
        case 21: 
          { return GREATHERTHEN;
          }
        case 218: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 219: break;
        case 99: 
          { return K_USING_SCAN;
          }
        case 220: break;
        case 12: 
          { return RIGHTBRACE;
          }
        case 221: break;
        case 101: 
          { return K_USING_INDEX;
          }
        case 222: break;
        case 100: 
          { return K_IS_NOT_NULL;
          }
        case 223: break;
        case 97: 
          { return K_ON_CREATE;
          }
        case 224: break;
        case 92: 
          { return K_CONTAINS;
          }
        case 225: break;
        case 6: 
          { return MINUS;
          }
        case 226: break;
        case 31: 
          { return RANGE;
          }
        case 227: break;
        case 47: 
          { return K_SET;
          }
        case 228: break;
        case 69: 
          { return K_COUNT;
          }
        case 229: break;
        case 52: 
          { return K_TRUE;
          }
        case 230: break;
        case 111: 
          { return K_DETACH_DELETE;
          }
        case 231: break;
        case 115: 
          { return K_OPTIONAL_MATCH;
          }
        case 232: break;
        case 4: 
          { return L_SPACE;
          }
        case 233: break;
        case 68: 
          { return K_MERGE;
          }
        case 234: break;
        case 78: 
          { return K_CREATE;
          }
        case 235: break;
        case 59: 
          { return K_DESC;
          }
        case 236: break;
        case 109: 
          { return K_CONSTRAINT_ON;
          }
        case 237: break;
        case 104: 
          { return K_USING_JOIN_ON;
          }
        case 238: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
